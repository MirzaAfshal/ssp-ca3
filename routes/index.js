var express = require('express');
var router = express.Router();
var path = require('path');
var fs = require('fs');
const querystring = require('querystring'); 
const { body } = require('express-validator');
const { IfExist } =  require('../FileOperations/IFExist')
const { AddData } = require('../FileOperations/AddDataToFile')
const { DisplayData } = require('../FileOperations/DisplayData')
const { UpdateData } = require('../FileOperations/UpdateDataInFile')
const { DeleteData } = require('../FileOperations/DeleteDataInFile')
const { RandomString } = require('../FileOperations/GenerateRandomString')




/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

/* Upload FileName */
router.post('/uploadfilename', body('name').not().isEmpty().trim().escape(), body('pass').not().isEmpty().trim().escape(), async(req, res) => {
  
  
  var FileName = req.body.name.toLowerCase();
  var SplitFileName =  FileName.split('-');
  console.log(SplitFileName)

  var PassWord =  req.body.pass;
  var SplitPassWord =  PassWord.split('-');
  console.log(SplitPassWord)
  if(SplitFileName.length > 1){
    FileName = "";
    for(var i = 0; i < SplitFileName.length; i++){
      FileName= FileName+SplitFileName[i]
    }
  }
  else{
    FileName = "";
    console.log("its running->",SplitFileName[0])
    FileName= SplitFileName[0]
  }
  console.log(FileName)
  if(SplitPassWord.length > 1){
    PassWord =""
    for(var i = 0; i < SplitPassWord.length; i++){
      PassWord = PassWord + SplitPassWord[i]
    }
  }
  else{
    PassWord =""
    PassWord = SplitPassWord[0]
  }
  console.log(PassWord)
  if(FileName === "" && PassWord === ""){
    console.log("Data is empty", FileName, PassWord)
  }
  else{
    var GeneratedString = await RandomString();
    var FileExist = await IfExist(FileName, GeneratedString.toLowerCase() , PassWord);
    console.log("File Name ->",FileName, req.body)
    if(FileExist){
      res.send({"status":"failed", "reason":"file already exist with these credentials"})
    }
    else{
      fs.writeFile(path.join(__dirname,"../UserFiles",FileName+'-'+GeneratedString.toLowerCase()+'-'+PassWord+'-File.json'),"", err => {
        if (err) {
          console.error(err)
          return
        }
      })
      /* for send data as querystring in url */
      var string = querystring.stringify({"status":"success", "Filename": FileName+'-'+GeneratedString.toLowerCase(), "password": PassWord});
      res.redirect('/dashboard/?' + string);
    }
  }
})

/* UploadRecord in File */
router.get('/dashboard/', async (req,res) =>{
  /* we can receive the data from url query string */
  /* also we couldn't render using put method */
  var data = req.query;
  res.render('dashboard', {data:data})
})

/* endpoint for adding data into the file */
router.post('/uploaddata/:data', async (req,res) => {
  console.log("upload 1st -----------------")
  var data  =  JSON.parse(JSON.stringify(req.body))
  var FileInfo = req.params.data;
  var FileName = FileInfo.split('-')[0]
  var AutoGeneratedString = FileInfo.split('-')[1]
  var FilePassword = FileInfo.split('-')[2]
  var DataToInsert = {}
  if(typeof(data.signinemail) === "string"){
    var randkey = Math.floor(Math.random() * 10000000000000000);
    DataToInsert[randkey] = data.signinemail;
    await AddData(DataToInsert,FileName.toLowerCase().trim(), AutoGeneratedString.toLowerCase().trim(),FilePassword.trim());
  }
  else if(typeof(data.signinemail) === "object"){
    data.signinemail.map(e => {
      var randkey = Math.floor(Math.random() * 10000000000000000);
      DataToInsert[randkey] = e;
    })
    await AddData(DataToInsert,FileName.toLowerCase().trim(), AutoGeneratedString.toLowerCase().trim(),FilePassword.trim());
  }
  var string = querystring.stringify({"status":"success", "Filename": FileName.toLowerCase()+'-'+AutoGeneratedString.toLowerCase(), "password": FilePassword});
  res.redirect('/dashboard/?' + string)
})

/* endpoint for displaying data to client */
router.get('/display/:fileinfo', async (req,res) => {
  var FileInfo = req.params.fileinfo;
  var FileName = FileInfo.split('-')[0]
  var AutoGeneratedString = FileInfo.split('-')[1]
  var FilePassword = FileInfo.split('-')[2]
  await DisplayData(FileName.toLowerCase().trim(), AutoGeneratedString.toLowerCase().trim(),FilePassword.trim()).then(result =>{
    res.send({"response":result})
  })
})

/* endpoint for update data into the file */
router.put('/modifyrecord/:tag/:fileinfo', async (req, res) =>{
  console.log(req.params.tag,req.params.fileinfo, req.body)
  var FileInfo = req.params.fileinfo;
  var FileName = FileInfo.split('-')[0].trim()
  var AutoGeneratedString = FileInfo.split('-')[1].trim()
  var FilePassword = FileInfo.split('-')[2].trim()
  var data = req.body;
  if(req.params.tag === "delete"){
    await DeleteData(data,FileName.trim(),AutoGeneratedString.trim(),FilePassword.trim()).then((result) =>{
      console.log(result)
      res.send({'response':'data deleted'})
    })
  }
  else{
    await UpdateData(data,FileName.trim(),AutoGeneratedString.trim(),FilePassword.trim()).then((result)=>{
      console.log(result)
      res.send({'response':'data updated'})
    })
  }
})

/* ------------------- */

router.post('/senitizer', body('name').not().isEmpty().trim().escape(), (req,res) => {
  console.log("dfsdf->",req.body)
  if(body.name === ""){
    console.log("body is empty")
  }
  else{
    console.log(req.body)
  }
})

module.exports = router;
